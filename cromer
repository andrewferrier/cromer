#!/usr/bin/env python3

from sys import platform as _platform
import argparse
import coloredlogs
import hashlib
import logging
import logging.handlers
import os
import sys

logger = logging.getLogger('cromer')
logger.propagate = False
logger.setLevel(logging.DEBUG)

if _platform == "linux" or _platform == "linux2":
    sysLogAddress = '/dev/log'
elif _platform == "darwin":
    sysLogAddress = '/var/run/syslog'
else:
    print("Unsupported platform.")
    sys.exit(3)

syslog_handler = logging.handlers.SysLogHandler(address=sysLogAddress)
syslog_handler.setLevel(logging.INFO)
sysLogFormatter = logging.Formatter('%(pathname)s[%(process)d] %(levelname)s %(lineno)d %(message)s')
syslog_handler.setFormatter(sysLogFormatter)
logger.addHandler(syslog_handler)

syserr_handler = coloredlogs.ColoredStreamHandler(stream=sys.stderr, show_timestamps=False, show_hostname=False, show_name=False, show_severity=False)
syserr_handler.setLevel(logging.WARNING)
logger.addHandler(syserr_handler)

coloredlogs.install(level=logging.DEBUG)

parser = argparse.ArgumentParser()

parser.add_argument('-v', '--verbose', action='count', default=0,
                    help="Make the output more verbose. This affects both the output logged to "
                    "syslog, as well as output to the console. Using this twice makes it doubly verbose.")

parser.add_argument('args', nargs=argparse.REMAINDER)

args = parser.parse_args()

if syslog_handler:
    if args.verbose > 1:
        syslog_handler.setLevel(logging.DEBUG)
    elif args.verbose == 1:
        syslog_handler.setLevel(logging.DEBUG)
    else:
        syslog_handler.setLevel(logging.INFO)

if syserr_handler:
    if args.verbose > 1:
        syserr_handler.setLevel(logging.DEBUG)
    elif args.verbose == 1:
        syserr_handler.setLevel(logging.INFO)
    else:
        syserr_handler.setLevel(logging.WARNING)

logger.debug("Arguments are: " + str(args))

m = hashlib.md5()
for arg in args.args:
    m.update(str.encode(arg))

hashfile = os.path.join(os.path.expanduser("~"), ".cromer." + m.hexdigest())

logger.debug("Hashfile for this command: " + hashfile)
